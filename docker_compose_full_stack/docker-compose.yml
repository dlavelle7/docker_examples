version: "2.3"
services:
  web:
    build: ./web/  # use Dockerfile from directory
    container_name: dockering_web
    expose:
      # expose port 8000 to linked services, so nginx can proxy incoming
      # requests to this container. expose doesn't open port to host machine
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file: live.env  # environment variables for web container in .env file
    volumes:
      - ./web:/web  # mount local file system to container file system
      - /staticfiles  # collect static will copy static files to here
    # runs gunicorn application server (runs migrations and collectstatic too)
    entrypoint: /web/entrypoint.sh
  
  nginx:
    restart: always  # if container crashes, restart (always up)
    build: ./nginx/  # use dockerfile in nginx dir
    ports:
      # expose port 80 to host machine and target container port 80 (which 
      # nginx listens on for requests)
      - "80:80"
    volumes_from:
      # load volumes from web container to serve static files for web app
      - web
  
  postgres:
    restart: always
    image: postgres:latest
    volumes:
      # mount "data" volume to where pg stores db files to persist data
      - type: volume
        source: data
        target: /var/lib/postgresql/data
      # the postgres:latest docker image auto loads all scripts in the
      # /docker-entrypoint-initdb.d dir. Initialize your DB here with a script
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      #- ./backups/postgresql:/backup
    env_file:
      - live.env
    # check db is accepting tcp connections
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 8s
      timeout: 3s
      retries: 3
  
  redis:
    restart: always
    image: redis:latest
    expose:
      - "6379"
  
volumes:
  # volume for db data persistence
  data:
